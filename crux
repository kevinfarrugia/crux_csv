#!/bin/bash

usage() {
  echo -e "Usage: $0 [options...] <url> <key> \n\
 -h, --help          Display help
 -o, --output <path> Output path where to save results \n\
 -a, --append        Append results to output file \n\
 -O, --origin        Collect data for origin-level \n\
 -f, --full          Include histogram data (grouped as Good, NI and Poor) \n\
 -V, --verbose       Make the operation more talkative" 1>&2
  exit 1
}

output=
verbose=0
append=0
full=0
query=""
origin=0

while [[ $# -gt 0 ]]; do
  case $1 in
  -h | --help)
    usage
    shift
    ;;
  -V | --verbose)
    verbose=1
    shift
    ;;
  -a | --append)
    append=1
    shift
    ;;
  -O | --origin)
    origin=1
    shift
    ;;
  -f | --full)
    full=1
    shift
    ;;
  -o | --output)
    output=$2
    shift 2
    ;;
  *)
    url=$1
    key=$2
    break
    shift
    ;;
  esac
done

if [ -z "$key" ]; then
  echo "CrUX API key is missing or invalid."
  exit 1
fi

if [ -z "$url" ]; then
  usage
fi

if [ "$verbose" == 1 ]; then
  echo -e "Running CrUX on $url"
  echo -e "...\n"
fi

if [ "$append" == 0 ] && [ -f "$output" ]; then
  read -p "Output file exists. Overwrite? (y/N) " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Nn]$ ]] || [[ -z $REPLY ]]; then
    exit
  fi
fi

if [ ! -z "$output" ]; then
  if [ $append == 0 ]; then
    if [ "$verbose" == 1 ]; then
      echo "Overwriting contents in $output"
      echo
    fi
    if [ "$full" == 1 ]; then
      echo "Date,URL,Form,LCP,LCP (good),LCP (NI),LCP (poor),CLS,CLS (good),CLS (NI),CLS (poor),FCP,FCP (good),FCP (NI),FCP (poor),FID,FID (good),FID (NI),FID (poor),TTFB,TTFB (good),TTFB (NI),TTFB (poor),INP,INP (good),INP (NI),INP (poor)" >$output
    else
      echo "Date,URL,Form,LCP,CLS,FCP,FID,TTFB,INP" >$output
    fi
  fi
fi

if [ "$origin" == 1 ]; then
  data="{'origin': '$url', 'formFactor': 'PHONE'}"
else
  data="{'url': '$url', 'formFactor': 'PHONE'}"
fi

if [ "$verbose" == 1 ]; then
  echo -e "curl https://chromeuxreport.googleapis.com/v1/records:queryRecord?key=$key\n\
  --header 'Content-Type: application/json'\n\
  --data $data"
  echo
fi

if [ "$full" == 1 ]; then
  query='[(now | strftime("%Y/%m/%d")), .record.key.url + .record.key.origin, .record.key.formFactor, .record.metrics.largest_contentful_paint.percentiles.p75, .record.metrics.largest_contentful_paint.histogram[0].density, .record.metrics.largest_contentful_paint.histogram[1].density, .record.metrics.largest_contentful_paint.histogram[2].density, .record.metrics.cumulative_layout_shift.percentiles.p75, .record.metrics.cumulative_layout_shift.histogram[0].density, .record.metrics.cumulative_layout_shift.histogram[1].density, .record.metrics.cumulative_layout_shift.histogram[2].density, .record.metrics.first_contentful_paint.percentiles.p75, .record.metrics.first_contentful_paint.histogram[0].density, .record.metrics.first_contentful_paint.histogram[1].density, .record.metrics.first_contentful_paint.histogram[2].density, .record.metrics.first_input_delay.percentiles.p75, .record.metrics.first_input_delay.histogram[0].density, .record.metrics.first_input_delay.histogram[1].density, .record.metrics.first_input_delay.histogram[2].density, .record.metrics.experimental_time_to_first_byte.percentiles.p75, .record.metrics.experimental_time_to_first_byte.histogram[0].density, .record.metrics.experimental_time_to_first_byte.histogram[1].density, .record.metrics.experimental_time_to_first_byte.histogram[2].density, .record.metrics.interaction_to_next_paint.percentiles.p75, .record.metrics.interaction_to_next_paint.histogram[0].density, .record.metrics.interaction_to_next_paint.histogram[1].density, .record.metrics.interaction_to_next_paint.histogram[2].density]'
else
  query='[(now | strftime("%Y/%m/%d")), .record.key.url + .record.key.origin, .record.key.formFactor, .record.metrics.largest_contentful_paint.percentiles.p75, .record.metrics.cumulative_layout_shift.percentiles.p75, .record.metrics.first_contentful_paint.percentiles.p75, .record.metrics.first_input_delay.percentiles.p75, .record.metrics.experimental_time_to_first_byte.percentiles.p75, .record.metrics.interaction_to_next_paint.percentiles.p75]'
fi

curl -s https://chromeuxreport.googleapis.com/v1/records:queryRecord?key=$key \
  --header 'Content-Type: application/json' \
  --data "$data" |
  jq -r "$query |
  @csv" |
  if [ ! -z "$output" ]; then
    tee 1>>$output 2>&1
  else
    cat
  fi

if [ "$origin" == 1 ]; then
  data="{'origin': '$url', 'formFactor': 'DESKTOP'}"
else
  data="{'url': '$url', 'formFactor': 'DESKTOP'}"
fi

if [ "$verbose" == 1 ]; then
  echo -e "curl https://chromeuxreport.googleapis.com/v1/records:queryRecord?key=$key\n\
  --header 'Content-Type: application/json'\n\
  --data $data"
  echo
fi

curl -s https://chromeuxreport.googleapis.com/v1/records:queryRecord?key=$key \
  --header 'Content-Type: application/json' \
  --data "$data" |
  jq -r "$query |
  @csv" |
  if [ ! -z "$output" ]; then
    tee 1>>$output 2>&1
  else
    cat
  fi

if [ ! -z "$output" ] && [ "$verbose" == 1 ]; then
  echo -e "Saved results to $output\n"
fi

if [ "$verbose" == 1 ]; then
  echo "Done."
fi
